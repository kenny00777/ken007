const helmet = require('helmet');

// Set content security policies
app.use(
  helmet.contentSecurityPolicy({
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'"],
      styleSrc: ["'self'"],
    },
  })
);
router.get('/', async (req, res) => {
  const { stock, like } = req.query;

  if (!stock) return res.json({ error: 'Missing stock query parameter.' });

  const stocks = Array.isArray(stock) ? stock : [stock];
  const ipHash = anonymizeIP(req.ip);

  try {
    const stockData = await Promise.all(
      stocks.map(async (symbol) => {
        const response = await axios.get(
          `https://stock-price-checker-proxy.freecodecamp.rocks/v1/stock/${symbol}/quote`
        );

        if (!response.data.symbol) throw new Error('Invalid stock symbol.');

        let stockDoc = await Stock.findOne({ symbol: response.data.symbol });
        if (!stockDoc) {
          stockDoc = new Stock({ symbol: response.data.symbol, likes: [] });
          await stockDoc.save();
        }

        if (like === 'true' && !stockDoc.likes.includes(ipHash)) {
          stockDoc.likes.push(ipHash);
          await stockDoc.save();
        }

        return {
          stock: stockDoc.symbol,
          price: response.data.latestPrice, // Ensure this is a number
          likes: stockDoc.likes.length,    // Ensure this is a number
        };
      })
    );

    if (stockData.length === 2) {
      const [stock1, stock2] = stockData;
      return res.json({
        stockData: [
          { ...stock1, rel_likes: stock1.likes - stock2.likes },
          { ...stock2, rel_likes: stock2.likes - stock1.likes },
        ],
      });
    }

    res.json({ stockData: stockData[0] });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});
if (stockData.length === 2) {
  const [stock1, stock2] = stockData;
  return res.json({
    stockData: [
      { ...stock1, rel_likes: stock1.likes - stock2.likes },
      { ...stock2, rel_likes: stock2.likes - stock1.likes },
    ],
  });
}
GET /api/stock-prices?stock=GOOG&stock=MSFT
suite('Functional Tests', () => {
  suite('GET /api/stock-prices', () => {
    test('Viewing one stock', (done) => {
      chai
        .request(server)
        .get('/api/stock-prices?stock=GOOG')
        .end((err, res) => {
          assert.equal(res.status, 200);
          assert.property(res.body, 'stockData');
          assert.isObject(res.body.stockData);
          assert.property(res.body.stockData, 'stock');
          assert.property(res.body.stockData, 'price');
          assert.property(res.body.stockData, 'likes');
          assert.isString(res.body.stockData.stock);
          assert.isNumber(res.body.stockData.price);
          assert.isNumber(res.body.stockData.likes);
          done();
        });
    });

    test('Viewing one stock and liking it', (done) => {
      chai
        .request(server)
        .get('/api/stock-prices?stock=GOOG&like=true')
        .end((err, res) => {
          assert.equal(res.status, 200);
          assert.property(res.body, 'stockData');
          assert.isObject(res.body.stockData);
          assert.property(res.body.stockData, 'likes');
          assert.isNumber(res.body.stockData.likes);
          done();
        });
    });

    test('Viewing the same stock and liking it again', (done) => {
      chai
        .request(server)
        .get('/api/stock-prices?stock=GOOG&like=true')
        .end((err, res) => {
          assert.equal(res.status, 200);
          assert.property(res.body, 'stockData');
          assert.isObject(res.body.stockData);
          assert.property(res.body.stockData, 'likes');
          assert.isNumber(res.body.stockData.likes);
          done();
        });
    });

    test('Viewing two stocks', (done) => {
      chai
        .request(server)
        .get('/api/stock-prices?stock=GOOG&stock=MSFT')
        .end((err, res) => {
          assert.equal(res.status, 200);
          assert.property(res.body, 'stockData');
          assert.isArray(res.body.stockData);
          assert.equal(res.body.stockData.length, 2);
          res.body.stockData.forEach((stock) => {
            assert.property(stock, 'stock');
            assert.property(stock, 'price');
            assert.property(stock, 'rel_likes');
            assert.isString(stock.stock);
            assert.isNumber(stock.price);
            assert.isNumber(stock.rel_likes);
          });
          done();
        });
    });

    test('Viewing two stocks and liking them', (done) => {
      chai
        .request(server)
        .get('/api/stock-prices?stock=GOOG&stock=MSFT&like=true')
        .end((err, res) => {
          assert.equal(res.status, 200);
          assert.property(res.body, 'stockData');
          assert.isArray(res.body.stockData);
          assert.equal(res.body.stockData.length, 2);
          res.body.stockData.forEach((stock) => {
            assert.property(stock, 'stock');
            assert.property(stock, 'price');
            assert.property(stock, 'rel_likes');
            assert.isString(stock.stock);
            assert.isNumber(stock.price);
            assert.isNumber(stock.rel_likes);
          });
          done();
        });
    });
  });
});

