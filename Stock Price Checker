if (stockData.length === 2) {
  const [stock1, stock2] = stockData;
  return res.json({
    stockData: [
      { ...stock1, rel_likes: stock1.likes - stock2.likes },
      { ...stock2, rel_likes: stock2.likes - stock1.likes },
    ],
  });
}
const server = require('../server'); // Ensure this is pointing to your app's server file
try {
  const response = await axios.get(url);
  if (response.status !== 200) throw new Error('Invalid API response.');
} catch (error) {
  console.error('API error:', error.message);
  return res.status(400).json({ error: 'Failed to fetch stock data.' });
}
const helmet = require('helmet');
const express = require('express');
const axios = require('axios');
const router = express.Router();
const Stock = require('./models/Stock'); // Assuming Mongoose model for stock data
const anonymizeIP = require('./utils/anonymizeIP'); // Your IP anonymization utility

// Set content security policies
router.use(
  helmet.contentSecurityPolicy({
    directives: {
      defaultSrc: ["'self'"],
      scriptSrc: ["'self'"],
      styleSrc: ["'self'"],
    },
  })
);

router.get('/api/stock-prices', async (req, res) => {
  const { stock, like } = req.query;

  if (!stock) return res.status(400).json({ error: 'Missing stock query parameter.' });

  const stocks = Array.isArray(stock) ? stock : [stock];
  const ipHash = anonymizeIP(req.ip);

  try {
    const stockData = await Promise.all(
      stocks.map(async (symbol) => {
        const response = await axios.get(
          `https://stock-price-checker-proxy.freecodecamp.rocks/v1/stock/${symbol}/quote`
        );

        if (!response.data.symbol) throw new Error(`Stock symbol "${symbol}" not found.`);

        let stockDoc = await Stock.findOne({ symbol: response.data.symbol });
        if (!stockDoc) {
          stockDoc = new Stock({ symbol: response.data.symbol, likes: [] });
          await stockDoc.save();
        }

        if (like === 'true' && !stockDoc.likes.includes(ipHash)) {
          stockDoc.likes.push(ipHash);
          await stockDoc.save();
        }

        return {
          stock: stockDoc.symbol,
          price: parseFloat(response.data.latestPrice), // Ensure price is a number
          likes: stockDoc.likes.length,
        };
      })
    );

    if (stockData.length === 2) {
      const [stock1, stock2] = stockData;
      return res.json({
        stockData: [
          { ...stock1, rel_likes: stock1.likes - stock2.likes },
          { ...stock2, rel_likes: stock2.likes - stock1.likes },
        ],
      });
    }

    res.json({ stockData: stockData[0] });
  } catch (error) {
    console.error('Error in stock route:', error.message);
    res.status(400).json({ error: error.message });
  }
});

module.exports = router;
npm start # Ensure the server is running
npm test  # Run your functional tests


